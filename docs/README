Important assumptions/concepts:

1) Each BPMN element name is unique per process. This simplifies live considerably because:
- We can use names instead of IDs simplifying the world for users and developers alike
- We can use event names to find the current process node. This is clear for BPMN events.
    For example, the "myStartEvent" BPMN element equals the event "myStartEvent".
    However, we can apply this also for tasks: the task "MyTask" starts with the event "MyTask" and
    ends by emitting the "MyTaskDone" event. That is, the status of the process is encoded in the event.

2) Only one process per bpmn file.

3) Other rules
- Boundary Events only for user, receive, and other wait tasks

Persistency:
 This engine saves the state while waiting for a task being done. While this is happening, all events are deferred until
 the state has been saved. When creating a process the process manager first finds to reload existing processes having
 the given ID. If there is no such process, it will be created.

Handler:
- All handlers get a BPMNProcessClient interface as this
- setTimeout does only work for short time spans but makes no sense for weeks and months
    Numerically, the max timeout is about 24 days. To find this test search for "testClearBPMNTimeoutByLeavingTask: maxTimeout".
    However, even if this would work numerically, we would loose the time when restarting node.
    So we have to find a different solution.
- Event Handler: It gets a callback to be called if the event has been handled.
  Event name == handler name;
- Task Handler: It gets a callback to be called if the event has been handled.
  Task name == handler being called on begin of a task
  Task name + 'Done' == handler being called on end of a task
- Exclusive gateway handlers: Gateways have two different kind of handlers. One handler that is being called
  before the gateway conditions are being evaluated (the gatway handler).
  Gateway event handler name == gateway name
  Additionally, for each outgoing transition we have a condition handler that hast to evaluate synchronously.
  So if backend data are required do this in the gateway callback
  Gateway condition handler name: <condition call back> == <gateway name> + ":" + <condition flow name>
  NOTE1: if the conditional flow does not have a name an error is thrown
- Timeouthandler:
    handler name == Timeout Event name,
    Timout is calculated by a callback having then name: <get timout call back> == <timeout event name> + ":getTimeout"
    Value in ms

Questions:
- On Task Begin handler has the same name as the task. On Task End handler uses taskName + "Done". Shall we use another convention?
- Shall we bind 'this' of handlers to the process or to another object?
- It would be easy to add a token tracker (same place where we write into the history) and simulation mode (doneHandlers will
  be executed automatically) and then to track the token in Cyrils BPMN diagram.
- Should we use the currentActivity in the name as well? E.g. instead of having MyTimout, MyTask_MyTimeout?

TODOs:
- Hierarchical history for processes having subprocesses
- Persisting processes HAVING sub-processes!!!!!!!!!!!!!
- Implement send event with findToken
- Should we replace the ':' separator for condition and timeout callbacks by '_'?
- We have too many emitToken operations. I think they can be simplified
- During wait states we should maybe remove the process from memory and reload it if necessary.
- Test default error and event handler
- MongoDB
- Introduce Logger
- Remove from db after reaching the final state - or shouldn't we?
- Test errors for exclusive gateways
- Build up tests with default events
- Define a name normalize operation on the BPMN package for Cyril
- Document public API
    - plus the handler api (NOTE: defaultErrorHandler, defaultEventHandler, and doneSavingHandler are also put into this object)
- Describe Semantics (use docs Token Semantics (Lam).pdf
- Describe the process client interface as seen by the handlers and the clients
- Parse MID (no outgoing/incoming flow references!), GBTEC, and Signavio BPMN files!
